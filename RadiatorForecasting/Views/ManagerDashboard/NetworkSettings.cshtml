@{
    Layout = "~/Views/Shared/_ManagerLayout.cshtml";
    ViewData["Title"] = "Настройки сети";
}

<div class="container-fluid">
    <!-- Заголовок -->
    <h1 class="display-5 fw-bold text-center mt-3">Настройки сети</h1>
    <hr class="mt-3 mb-4" style="border-top: 3px solid #b0b0b0;">

    <!-- Загрузка данных -->
    <div id="loading" class="text-center">
        <p class="fs-5 text-muted">Загрузка...</p>
    </div>

    <!-- Ошибка -->
    <div id="error" class="alert alert-danger text-center d-none">
        Произошла ошибка при загрузке данных. Попробуйте позже.
    </div>

    <!-- Метрики -->
    <div id="metrics" class="d-none">
        <h3 class="fw-bold">Метрики</h3>
        <table class="table table-bordered text-center metrics-table">
            <thead class="table-light">
                <tr>
                    <th>Метрика</th>
                    <th>Значение</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Среднеквадратическая ошибка (MSE)</td>
                    <td id="mse">Загрузка...</td>
                </tr>
                <tr>
                    <td>Точность</td>
                    <td id="accuracy">Загрузка...</td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Прогресс обучения -->
    <div id="training-progress" class="d-none">
        <h3 class="fw-bold">Прогресс обучения</h3>
        <canvas id="progressChart"></canvas>
        <!-- Таблица данных -->
        <div class="table-responsive mt-4 scrollable-table">
            <h5 class="fw-bold">Таблица значений графиков</h5>
            <table class="table table-bordered text-center">
                <thead class="table-light">
                    <tr>
                        <th>Эпоха</th>
                        <th>Точность</th>
                        <th>Потери</th>
                    </tr>
                </thead>
                <tbody id="graph-data">
                    <!-- Данные загружаются динамически -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Архитектура сети -->
    <div id="architecture" class="d-none">
        <h3 class="fw-bold">Архитектура сети</h3>
        <ul id="architectureList" class="list-group">
            <!-- Данные загружаются динамически -->
        </ul>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            fetch('/ManagerDashboard/LoadNetworkMetrics')
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        document.getElementById("loading").classList.add("d-none");
                        document.getElementById("error").classList.remove("d-none");
                        return;
                    }

                    // Метрики
                    document.getElementById("mse").textContent = data.metrics.MSE.toFixed(6);
                    document.getElementById("accuracy").textContent = data.metrics.Accuracy.toFixed(6);
                    document.getElementById("metrics").classList.remove("d-none");

                    // Прогресс обучения
                    const progress = data.progress;
                    const ctx = document.getElementById("progressChart").getContext("2d");
                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: progress.epochs,
                            datasets: [
                                {
                                    label: 'Точность',
                                    data: progress.accuracy,
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    borderWidth: 2,
                                    fill: false
                                },
                                {
                                    label: 'Потери',
                                    data: progress.loss,
                                    borderColor: 'rgba(255, 99, 132, 1)',
                                    borderWidth: 2,
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'top',
                                }
                            },
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Эпохи'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Значения'
                                    }
                                }
                            }
                        }
                    });
                    document.getElementById("training-progress").classList.remove("d-none");

                    // Заполнение таблицы
                    const tableBody = document.getElementById("graph-data");
                    tableBody.innerHTML = ""; // Очищаем таблицу
                    for (let i = 0; i < progress.epochs.length; i++) {
                        const row = `
                                    <tr>
                                        <td>${progress.epochs[i]}</td>
                                        <td>${progress.accuracy[i].toFixed(6)}</td>
                                        <td>${progress.loss[i].toFixed(6)}</td>
                                    </tr>
                                `;
                        tableBody.innerHTML += row;
                    }

                    // Архитектура сети
                    const architecture = data.architecture;
                    const architectureList = document.getElementById("architectureList");
                    architecture.forEach((layer, index) => {
                        const item = document.createElement("li");
                        item.classList.add("list-group-item");
                        item.textContent = `Слой ${index + 1}: Тип - ${layer.Type}, Вывод - ${layer['Output Shape']}, Нейроны - ${layer.Units}`;
                        architectureList.appendChild(item);
                    });
                    document.getElementById("architecture").classList.remove("d-none");

                    // Скрываем загрузку
                    document.getElementById("loading").classList.add("d-none");
                })
                .catch(error => {
                    console.error("Ошибка загрузки данных:", error);
                    document.getElementById("loading").classList.add("d-none");
                    document.getElementById("error").classList.remove("d-none");
                });
        });
    </script>
}


